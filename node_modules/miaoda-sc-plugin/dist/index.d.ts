import * as vite from 'vite';
import { Plugin, PluginOption } from 'vite';

interface BorderStylePluginOptions {
    /**
     * 是否启用响应式变体
     * @default true
     */
    responsive?: boolean;
    /**
     * 自定义 CSS 选择器前缀
     * @default ''
     */
    prefix?: string;
}
declare function borderStylePlugin(options?: BorderStylePluginOptions): Plugin;

/**
 * @file vite-plugin-dynamic-redirect.ts
 *
 * @author allenve(yupeng12@baidu.com)
 * @created: 2025/08/04
 */

declare function dynamicRedirectPlugin(): Plugin;

declare function replaceLocationPlugin(): Plugin;

/**
 * @file vite-plugin-fonts-code.ts
 *
 * @author allenve(yupeng12@baidu.com)
 * @created: 2025/08/04
 */

interface FontsCodePluginOptions {
    href?: string;
    id?: string;
}
declare function fontsCodePlugin(options?: FontsCodePluginOptions): Plugin;

interface MdClickPluginOptions {
    appType?: string;
}
declare function mdClickPlugin(options?: MdClickPluginOptions): Plugin;

declare function injectOnErrorPlugin(): Plugin;

declare const extractRouterPlugin: () => {
    name: string;
    apply: string;
    enforce: string;
    configResolved(config: any): Promise<void>;
    buildStart(): void;
    transform(code: string, id: string): Promise<void>;
    configureServer(_server: any): void;
};

declare const extractTaroRouterPlugin: () => {
    name: string;
    enforce: string;
    buildStart(): void;
    transform(code: string, id: string): Promise<void>;
    configureServer(server: any): void;
};

/**
 * @file vite-plugin-inject-domain.ts
 *
 * @author allenve(yupeng12@baidu.com)
 * @created: 2025/08/15
 */

declare function injectDomainPlugin(domain: string): Plugin;

/**
 * @file vite-plugin-gui-listener.ts
 *
 * @author allenve(yupeng12@baidu.com)
 * @created: 2025/08/15
 */

declare function injectedGuiListenerPlugin(options?: {
    origin?: string;
    path?: string;
}): Plugin;

type TaggerOptions = {
  /**
   * 是否为原子组件路径，原子组件路径不加标记
   * @returns
   */
  isAtomComponentPath: (pathname: string) => boolean;

  /**
   * 是否需要标记元素
   * @param elementName
   * @returns
   */
  shouldTagElement: (elementName: string) => boolean;

  /**
   * 指定根目录，用于标记文件路径
   */
  root?: string;
};

declare const makeTagger: (options?: Partial<TaggerOptions>) => PluginOption;

declare const patchAfterUpdate: () => {
    name: string;
    resolveId(id: string): string;
    load(id: string): string;
    transformIndexHtml(html: string): {
        html: string;
        tags: {
            tag: string;
            attrs: {
                type: string;
                src: string;
            };
            injectTo: string;
        }[];
    };
};

type AppType = {
    appType?: 'web' | 'miniapp';
    cdnBase?: string;
};
declare function miaodaDevPlugin(options?: BorderStylePluginOptions & FontsCodePluginOptions & AppType): (vite.Plugin<any> | {
    name: string;
    enforce: string;
    buildStart(): void;
    transform(code: string, id: string): Promise<void>;
    configureServer(server: any): void;
} | {
    name: string;
    enforce: string;
    configResolved(resolvedConfig: any): void;
    transform(code: any, id: any): {
        code: string;
        map: any;
    };
})[];

export { type AppType, type BorderStylePluginOptions, type FontsCodePluginOptions, borderStylePlugin, dynamicRedirectPlugin, extractRouterPlugin, extractTaroRouterPlugin, fontsCodePlugin, injectDomainPlugin, injectOnErrorPlugin, injectedGuiListenerPlugin, replaceLocationPlugin as locationRoutePlugin, makeTagger, mdClickPlugin, miaodaDevPlugin, patchAfterUpdate };
